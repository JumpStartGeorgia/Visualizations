/*
	SUPERSCROLLORAMA - The jQuery plugin for doing scroll animations
	by John Polacek (@johnpolacek)

	Powered by the Greensock Tweening Platform
	http://www.greensock.com
	Greensock License info at http://www.greensock.com/licensing/

	Dual licensed under MIT and GPL.

	Thanks to Jan Paepke (@janpaepke) for making many nice improvements
*/

(function($) {

	$.superscrollorama = function(options) {

		var superscrollorama = this;
		var defaults = {
			isVertical:true,		// are we scrolling vertically or horizontally?
			triggerAtCenter: true,	// the animation triggers when the respective Element's origin is in the center of the scrollarea. This can be changed here to be at the edge (-> false)
			playoutAnimations: true,	// when scrolling past the animation should they be played out (true) or just be jumped to the respective last frame (false)? Does not affect animations where duration = 0
			reverse: true			// make reverse configurable so you don't have to pass it in for every tween to reverse globally
		};
		superscrollorama.settings = $.extend({}, defaults, options);
        var $window = $(window);

		// PRIVATE VARS

		var animObjects = [],
			pinnedObjects = [],
			scrollContainerOffset = {x: 0, y: 0},
			doUpdateOnNextTick = false,
			targetOffset,
			i;

		// PRIVATE FUNCTIONS

		function init() {
			// set event handlers
			$window.scroll(function() {
				doUpdateOnNextTick = true;
			});
			TweenLite.ticker.addEventListener("tick", tickHandler);
		}

		function cssNumericPosition ($elem) { // return 0 when value is auto
			var obj = {
				top: parseFloat($elem.css("top")),
				left: parseFloat($elem.css("left"))
			};
			if (isNaN(obj.top)) {
				obj.top = 0;
			}
			if (isNaN(obj.left)) {
				obj.left = 0;
			}
			return obj;
		}

		function tickHandler() {
			if (doUpdateOnNextTick) {
				checkScrollAnim();
				doUpdateOnNextTick = false;
			}
		}

		// reset a pin Object
		function resetPinObj (pinObj) {
			pinObj.el.css('position', pinObj.origPositioning.pos);
			pinObj.el.css('top', pinObj.origPositioning.top);
			pinObj.el.css('left', pinObj.origPositioning.left);
		}
		// set a Tween Progress (use totalProgress for TweenMax and TimelineMax to include repeats)
		function setTweenProgress(tween, progress) {
			if (tween) {
				if (tween.totalProgress) {
					tween.totalProgress(progress).pause();
				} else {
					tween.progress(progress).pause();
				}
			}
		}

		function checkScrollAnim() {

			var currScrollPoint = superscrollorama.settings.isVertical ? $window.scrollTop() + scrollContainerOffset.y :  $window.scrollLeft() + scrollContainerOffset.x;
			var offsetAdjust = superscrollorama.settings.triggerAtCenter ? (superscrollorama.settings.isVertical ? - $window.height()/2 : - $window.width()/2) : 0;
			var i, startPoint, endPoint;

			// check all animObjects
			var numAnim = animObjects.length;
			for (i=0; i<numAnim; i++) {
				var animObj = animObjects[i],
					target = animObj.target,
					offset = animObj.offset;

				if (typeof(target) === 'string') {
                    targetOffset = $(target).offset();
					startPoint = superscrollorama.settings.isVertical ? targetOffset.top + scrollContainerOffset.y : targetOffset.left + scrollContainerOffset.x;
					offset += offsetAdjust;
				} else if (typeof(target) === 'number')	{
					startPoint = target;
				} else if ($.isFunction(target)) {
					startPoint = target.call(this);
				} else {
                    targetOffset = target.offset();
                    startPoint = superscrollorama.settings.isVertical ? targetOffset.top + scrollContainerOffset.y : targetOffset.left + scrollContainerOffset.x;
					offset += offsetAdjust;
				}

				startPoint += offset;
				endPoint = startPoint + animObj.dur; // if the duration is 0 the animation should autoplay (forward going from BEFORE to AFTER and reverse going from AFTER to BEFORE)

				if ((currScrollPoint > startPoint && currScrollPoint < endPoint) && animObj.state !== 'TWEENING') {
					// if it should be TWEENING and isn't..
					animObj.state = 'TWEENING';
					animObj.start = startPoint;
					animObj.end = endPoint;
				}
				if (currScrollPoint < startPoint && animObj.state !== 'BEFORE' && animObj.reverse) {
					// if it should be at the BEFORE tween state and isn't..
					if (superscrollorama.settings.playoutAnimations || animObj.dur === 0) {
						animObj.tween.reverse();
					} else {
						setTweenProgress(animObj.tween, 0);
					}
					animObj.state = 'BEFORE';
				} else if (currScrollPoint > endPoint && animObj.state !== 'AFTER') {
					// if it should be at the AFTER tween state and isn't..
					if (superscrollorama.settings.playoutAnimations || animObj.dur === 0) {
						animObj.tween.play();
					} else {
						setTweenProgress(animObj.tween, 1);
					}
					animObj.state = 'AFTER';
				} else if (animObj.state === 'TWEENING') {
					// if it is TWEENING..
					var repeatIndefinitely = false;
					if (animObj.tween.repeat) {
						// does the tween have the repeat option (TweenMax / TimelineMax)
						repeatIndefinitely = (animObj.tween.repeat() === -1);
					}

					if (repeatIndefinitely) { // if the animation loops indefinitely it will just play for the time of the duration
						var playheadPosition = animObj.tween.totalProgress(); // there is no "isPlaying" value so we need to save the playhead to determine whether the animation is running
						if (animObj.playeadLastPosition === null || playheadPosition === animObj.playeadLastPosition) {
							if (playheadPosition === 1) {
								if (animObj.tween.yoyo()) {
									// reverse Playback with infinitely looped tweens only works with yoyo true
									animObj.tween.reverse();
								} else {
									animObj.tween.totalProgress(0).play();
								}
							} else {
								animObj.tween.play();
							}
						}
						animObj.playeadLastPosition = playheadPosition;
					} else {
						setTweenProgress(animObj.tween, (currScrollPoint - animObj.start)/(animObj.end - animObj.start));
					}
				}
			}

			// check all pinned elements
			var numPinned = pinnedObjects.length;
			for (i=0; i<numPinned; i++) {
				var pinObj = pinnedObjects[i];
				var el = pinObj.el;

				// should object be pinned (or updated)?
				if (pinObj.state !== 'PINNED') {

                    var pinObjSpacerOffset = pinObj.spacer.offset();

					if (pinObj.state === 'UPDATE') {
						resetPinObj(pinObj); // revert to original Position so startPoint and endPoint will be calculated to the correct values
					}

					startPoint = superscrollorama.settings.isVertical ? pinObjSpacerOffset.top + scrollContainerOffset.y : pinObjSpacerOffset.left + scrollContainerOffset.x;
					startPoint += pinObj.offset;
					endPoint = startPoint + pinObj.dur;

					var jumpedPast = ((currScrollPoint > endPoint && pinObj.state === 'BEFORE') || (currScrollPoint < startPoint && pinObj.state === 'AFTER')); // if we jumped past a pinarea (i.e. when refreshing or using a function) we need to temporarily pin the element so it gets positioned to start or end respectively
					var inPinAra = (currScrollPoint > startPoint && currScrollPoint < endPoint);
					if (inPinAra || jumpedPast) {
						// set original position values for unpinning
						if (pinObj.pushFollowers && el.css('position') === "static") { // this can't be. If we want to pass following elements we need to at least allow relative positioning
							el.css('position', "relative");
						}
						// save original positioning
						pinObj.origPositioning = {
							pos: el.css('position'),
							top: pinObj.spacer.css('top'),
							left: pinObj.spacer.css('left')
						};
						// change to fixed position
						pinObj.fixedPositioning = {
							top: superscrollorama.settings.isVertical ? -pinObj.offset : pinObjSpacerOffset.top,
							left: superscrollorama.settings.isVertical ? pinObjSpacerOffset.left : -pinObj.offset
						};
						el.css('position','fixed');
						el.css('top', pinObj.fixedPositioning.top);
						el.css('left', pinObj.fixedPositioning.left);

						// save values
						pinObj.pinStart = startPoint;
						pinObj.pinEnd = endPoint;

						// If we want to push down following Items we need a spacer to do it, while and after our element is fixed.
						if (pinObj.pushFollowers) {
							if (superscrollorama.settings.isVertical) {
									pinObj.spacer.height(pinObj.dur + el.outerHeight());
							} else {
									pinObj.spacer.width(pinObj.dur + el.outerWidth());
							}
						} else {
							if (pinObj.origPositioning.pos === "absolute") { // no spacer
								pinObj.spacer.width(0);
								pinObj.spacer.height(0);
							} else { // spacer needs to reserve the elements space, while pinned
								if (superscrollorama.settings.isVertical) {
									pinObj.spacer.height(el.outerHeight());
								} else {
									pinObj.spacer.width(el.outerWidth());
								}
							}
						}


						if (pinObj.state === "UPDATE") {
							if (pinObj.anim) {
								setTweenProgress(pinObj.anim, 0); // reset the progress, otherwise the animation won't be updated to the new position
							}
						} else if (pinObj.onPin) {
							pinObj.onPin(pinObj.state === "AFTER");
						}

						// pin it!
						pinObj.state = 'PINNED';
					}
				}
				// If state changed to pinned (or already was) we need to position the element
				if (pinObj.state === 'PINNED') {
					// Check to see if object should be unpinned
					if (currScrollPoint < pinObj.pinStart || currScrollPoint > pinObj.pinEnd) {
						// unpin it
						var before = currScrollPoint < pinObj.pinStart;
						pinObj.state = before ? 'BEFORE' : 'AFTER';
						// set Animation to end or beginning
						setTweenProgress(pinObj.anim, before ? 0 : 1);

						var spacerSize = before ? 0 : pinObj.dur;

						if (superscrollorama.settings.isVertical) {
							pinObj.spacer.height(pinObj.pushFollowers ? spacerSize : 0);
						} else {
							pinObj.spacer.width(pinObj.pushFollowers ? spacerSize : 0);
						}

						// correct values if pin Object was moved (animated) during PIN (pinObj.el.css values will never be auto as they are set by the class)
						var deltay = pinObj.fixedPositioning.top - cssNumericPosition(pinObj.el).top;
						var deltax = pinObj.fixedPositioning.left - cssNumericPosition(pinObj.el).left;

						// first revert to start values
						resetPinObj(pinObj);

						// position element correctly
						if (!pinObj.pushFollowers || pinObj.origPositioning.pos === "absolute") {
							var pinOffset;

							if (pinObj.origPositioning.pos === "relative") { // position relative and pushFollowers = false
								pinOffset = superscrollorama.settings.isVertical ?
											parseFloat(pinObj.origPositioning.top) :
											parseFloat(pinObj.origPositioning.left);
								if (isNaN(pinOffset)) { // if Position was "auto" parseFloat will result in NaN
									pinOffset = 0;
								}
							} else {
								pinOffset = superscrollorama.settings.isVertical ?
											pinObj.spacer.position().top :
											pinObj.spacer.position().left;
							}

							var direction = superscrollorama.settings.isVertical ?
											"top" :
											"left";

							pinObj.el.css(direction, pinOffset + spacerSize);
						} // if position relative and pushFollowers is true the element remains untouched.

						// now correct values if they have been changed during pin
						if (deltay !== 0) {
							pinObj.el.css("top", cssNumericPosition(pinObj.el).top - deltay);
						}
						if (deltax !== 0) {
							pinObj.el.css("left", cssNumericPosition(pinObj.el).left - deltax);
						}
						if (pinObj.onUnpin) {
							pinObj.onUnpin(!before);
						}
					} else if (pinObj.anim) {
						// do animation
						setTweenProgress(pinObj.anim, (currScrollPoint - pinObj.pinStart)/(pinObj.pinEnd - pinObj.pinStart));
					}
				}
			}
		}

		// PUBLIC FUNCTIONS
		superscrollorama.addTween = function(target, tween, dur, offset, reverse) {

			tween.pause();

			animObjects.push({
				target:target,
				tween: tween,
				offset: offset || 0,
				dur: dur || 0,
				reverse: (typeof reverse !== "undefined") ? reverse : superscrollorama.settings.reverse, // determine if reverse animation has been disabled
				state:'BEFORE'
			});

			return superscrollorama;
		};

		superscrollorama.pin = function(el, dur, vars) {
			if (typeof(el) === 'string') {
				el = $(el);
			}
			var defaults = {
				offset: 0,
				pushFollowers: true		// if true following elements will be "pushed" down, if false the pinned element will just scroll past them
			};
			vars = $.extend({}, defaults, vars);
			if (vars.anim) {
				vars.anim.pause();
			}

			var spacer = $('<div class="superscrollorama-pin-spacer"></div>');
			spacer.css("position", "relative");
			spacer.css("top", el.css("top"));
			spacer.css("left", el.css("left"));
			el.before(spacer);

			pinnedObjects.push({
				el:el,
				state:'BEFORE',
				dur:dur,
				offset: vars.offset,
				anim:vars.anim,
				pushFollowers:vars.pushFollowers,
				spacer:spacer,
				onPin:vars.onPin,
				onUnpin:vars.onUnpin
			});
			return superscrollorama;
		};

		superscrollorama.updatePin = function (el, dur, vars) { // Update a Pinned object. dur and vars are optional to only change vars and keep dur just pass NULL for dur
			if (typeof(el) === 'string') {
				el = $(el);
			}
			if (vars.anim) {
				vars.anim.pause();
			}

			var numPinned = pinnedObjects.length;

			for (i=0; i<numPinned; i++) {
				var pinObj = pinnedObjects[i];
				if (el.get(0) === pinObj.el.get(0)) {

					if (dur) {
						pinObj.dur = dur;
					}
					if (vars.anim) {
						pinObj.anim = vars.anim;
					}
					if (vars.offset) {
						pinObj.offset = vars.offset;
					}
					if (typeof vars.pushFollowers !== "undefined") {
						pinObj.pushFollowers = vars.pushFollowers;
					}
					if (vars.onPin) {
						pinObj.onPin = vars.onPin;
					}
					if (vars.onUnpin) {
						pinObj.onUnpin = vars.onUnpin;
					}
					if ((dur || vars.anim || vars.offset) && pinObj.state === 'PINNED') { // this calls for an immediate update!
						pinObj.state = 'UPDATE';
						checkScrollAnim();
					}
				}
			}
			return superscrollorama;
		};

		superscrollorama.removeTween = function (target, tween, reset) {
			var count = animObjects.length;
			if (typeof reset === "undefined") {
				reset = true;
			}
			for (var index = 0; index < count; index++) {
				var value = animObjects[index];
				if (value.target === target &&
					(!tween || value.tween === tween)) { // tween is optional. if not set just remove element
					animObjects.splice(index,1);
					if (reset) {
						setTweenProgress(value.tween, 0);
					}
					count--;
					index--;
				}
			}
			return superscrollorama;
		};

		superscrollorama.removePin = function (el, reset) {
			if (typeof(el) === 'string') {
				el = $(el);
			}
			if (typeof reset === "undefined") {
				reset = true;
			}
			var count = pinnedObjects.length;
			for (var index = 0; index < count; index++) {
				var value = pinnedObjects[index];
				if (value.el.is(el)) {
					pinnedObjects.splice(index,1);
					if (reset) {
						value.spacer.remove();
						resetPinObj(value);
						if (value.anim) {
							setTweenProgress(value.anim, 0);
						}
					}
					count--;
					index--;
				}
			}
			return superscrollorama;
		};

		superscrollorama.setScrollContainerOffset = function (x, y) {
			scrollContainerOffset.x = x;
			scrollContainerOffset.y = y;
			return superscrollorama;
		};

		superscrollorama.triggerCheckAnim = function (immediately) { // if immedeately is true it will be updated right now, if false it will wait until next tweenmax tick. default is false
			if (immediately) {
				checkScrollAnim();
			} else {
				doUpdateOnNextTick = true;
			}
			return superscrollorama;
		};


		// INIT
		init();

		return superscrollorama;
	};

})(jQuery);

// @koala-prepend "../superscrollorama/js/jquery.superscrollorama.js"


  var topRange = 200;  // measure from the top of the viewport to X pixels down
  var edgeMargin = 20;
  var menu_text = [];
  var menu_position = [];
  var menu_section = [];
  var css_class = '';

  // highlight correct menu item based on position
  function highlight_correct_menu_item(){
    var winTop = $(window).scrollTop();
    for(var i=0;i<menu_position.length;i++){
     if ( winTop >= menu_position[i] && (i == menu_position.length-1 || (i < menu_position.length && winTop < menu_position[i+1]))){
      $('#sidebar #menu li')
       .removeClass('active')
       .eq(i).addClass('active');

      $('#slide_menu ul li')
      .removeClass('active')
       .eq(i).addClass('active');

       break;

     }
    }
  }



// adjust location of legend in maps
function adjust_legend_placement(){
  var scrn_width = $(window).width();  

  // adjust country legend
  // - reset to default values first
  $('#page10 #map').css('margin-bottom', '0px');
  $('#page10 #legend ul').css('margin-left', '0');
  $('#page10 #legend').css('top', '150px');
  $('#page10 #legend ul li').css('display', 'block').css('margin-right', '0px');
  $('#page11 #map').css('margin-bottom', '0px');
  $('#page11 #legend').css('top', '150px');
  $('#page11 #legend ul').css('margin-left', '0');
  $('#page11 #legend ul li').css('display', 'block').css('margin-right', '0px');


  if (scrn_width > 1900){
    $('#page10 #legend ul').css('margin-left', '125px');
    $('#page11 #legend ul').css('margin-left', '125px');
  }else if (scrn_width > 1800){
    $('#page10 #legend ul').css('margin-left', '100px');
    $('#page11 #legend ul').css('margin-left', '100px');
  }else if (scrn_width > 1700){
    $('#page10 #legend ul').css('margin-left', '75px');
    $('#page11 #legend ul').css('margin-left', '75px');
  }else if (scrn_width > 1600){
    $('#page10 #legend ul').css('margin-left', '50px');
    $('#page11 #legend ul').css('margin-left', '50px');
  }else if (scrn_width > 1500){
    $('#page10 #legend ul').css('margin-left', '25px');
    $('#page11 #legend ul').css('margin-left', '25px');
  }else if (scrn_width > 1350){
    $('#page10 #legend ul').css('margin-left', '0');
    $('#page11 #legend ul').css('margin-left', '0');
  }else{
    $('#page10 #map').css('margin-bottom', '75px');
    $('#page10 #legend').css('top', '360px');
    $('#page10 #legend ul li').css('display', 'inline-block').css('margin-right', '10px');

    $('#page11 #map').css('margin-bottom', '75px');
    $('#page11 #legend').css('top', '360px');
    $('#page11 #legend ul li').css('display', 'inline-block').css('margin-right', '10px');
  
  }

  // adjust gori legend
  if (scrn_width > 1700){
    $('#page12 #legend ul').css('margin-left', '45px');
  } else if (scrn_width > 1350) {
    $('#page12 #legend ul').css('margin-left', '25px');
  } else if (scrn_width > 1175) {
    $('#page12 #legend ul').css('font-size', '13px').css('margin-left', '15px');
  } else if (scrn_width > 975) {
    $('#page12 #legend ul').css('font-size', '11px').css('margin-left', '5px');
  } else  {
    $('#page12 #legend ul').css('font-size', '9px').css('margin-left', '0');
  }  
}

/////////////////////////////////////////


function compute_scroll_top(parent, child){
  if ($(window).scrollTop() > child){
    return parent;
  } else{
    return child;
  }
}

$(window).load(function ()
{
  adjust_legend_placement();

  var controller = $.superscrollorama({
    triggerAtCenter: false,
    playoutAnimations: true
  });

  // fix placements when window resizes
  window.onresize = function()
  {
//    adjust_legend_placement();
    window.location.reload();
  }


  // if screen size is too small, show message
  if ($(window).width() < 950){
    $.fancybox({
		  fitToView	: true,
		  autoSize	: true,
		  href: '#screen_size'
	  });
	    
//    $('#screen_size').show();
  }



  // popup menu
  $("#popup_menu_button img").click(function () {
    $("#slide_menu").animate({width:'toggle'},340);
  });

  /////////////////////////////////////////////////
  
  

  // if click on question mark, go to that place
  $('#question_marks > div:nth-child(1) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page5a').offset().top, $('#page5a #stations').offset().top) });
  });
  $('#question_marks > div:nth-child(2) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page6').offset().top, $('#page6 .middle').offset().top) });
  });
  $('#question_marks > div:nth-child(3) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page7').offset().top, $('#page7 .bottom').offset().top) });
  });
  $('#question_marks > div:nth-child(4) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page8').offset().top, $('#page8 .after').offset().top) });
  });


  // if click on fix, go to that place
  $('#line_fix > div:nth-child(1) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page15').offset().top, $('#page15 .middle').offset().top) });
  });
  $('#line_fix > div:nth-child(2) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page16').offset().top, $('#page16 .middle').offset().top) });
  });
  $('#line_fix > div:nth-child(3) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page16').offset().top, $('#page16 .middle').offset().top) });
  });
  $('#line_fix > div:nth-child(4) > img').click(function ()
  {
    $('html, body').animate({scrollTop: compute_scroll_top($('#page17').offset().top, $('#page17 .after').offset().top) });
  });




///////////////////////////////////

  controller.addTween(
    $('#page1'),
    (new TimelineMax()).append(TweenMax.fromTo($('#page1 #scroll_down, #explanation'), .5, {css: {opacity: 1}}, {css: {opacity: 0}}))
  );




/////////////////////////////////
  var pinh = 2500;
  controller.pin($('#page2'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.to($('#page2 .bottom'), .5, {css:{top: 0}}))
          .append(TweenMax.to($('#page2 .top'), .5, {css:{opacity: 1}})),
    onPin: function ()
    {
      $('#page2-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page2').offset().top > $(window).scrollTop())
      {
        $('#page2-spacer').show();
      }
    }
  });
  $('#page2').after('<div id="page2-spacer"></div>').next().height(pinh);


/////////////////////////////////

  $('#ballots .all').css({right: $(window).width() - $('#ballots .all').offset().left - $('#ballots .all').width()});
  controller.pin($('#ballots .all'), 9e5, {
    pushFollowers: false
  });

  var i = $('#ballots .list li').length;
  while (i --)
  {
    controller.addTween(
      $('#ballots .list li').eq(i).children('.mark'),
      (new TimelineMax()).append([
        TweenMax.to($('#ballots .list li').eq(i).children('.mark'), .001, {css: {visibility: 'hidden'}}),
        TweenMax.to($('#ballots .all li').eq(i), .001, {css: {visibility: 'visible'}})
      ])
    );
  }

  // if click on main election icons, go to that section
  $('#ballots .all li').click(function ()
  {
    $('html, body').animate({scrollTop: $('#ballots .list li').eq($(this).index()).offset().top - $(this).closest('.all').height()});
  });
  


/////////////////////////////////




  //controller.pin($('#question_marks').parent(), 9e5);



/*
  var pinh = 3300;
  controller.pin($('#page5'), pinh, {
    anim: (new TimelineMax())
          //.append(TweenMax.fromTo($('#page5'), .5, {}, {css: {transform: 'translate(0px, -' + $('#page5 > header').outerHeight(true) + 'px)'}}))
          //.append(TweenMax.fromTo($('#stations').parent().add('#page5-subtitle'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page5-subtitle'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#stations').parent(), .5, {css: {position: 'relative', top: 900}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#stations-connect'), .5, {css:{top: 700}}, {css:{top: -42}}))
          .append(TweenMax.to($('#stations-connect #line1'), .5, {css:{top: -100, opacity: 0}}))
          .append(TweenMax.fromTo($('#stations-connect .img img:last-of-type, #stations-connect .right'), .5, {css:{top: 700}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page5 footer'), .5, {css: {opacity: 0}}, {css: {opacity: 1}})),
    onPin: function ()
    {
      $('#page5-spacer').hide();
      $('#ballots .all li:first').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page5').offset().top > $(window).scrollTop())
      {
        $('#page5-spacer').show();
      }
      $('#ballots .all li:first').css({opacity: .6});
    }
  });
  $('#page5').after('<div id="page5-spacer"></div>').next().height(pinh);

*/

  controller.addTween(
    $('#page5'),
    (new TimelineMax()).append([
      TweenMax.to($('#question_marks').parent(), .001, {css: {position: 'fixed', width: 'auto', left: $('#sidebar').width(), right: 0, zIndex: 9999, top: $('#ballots .all').outerHeight()}}),
      TweenMax.to($('#question_marks_spacer'), .001, {css: {height: $('#question_marks').parent().outerHeight(true)}})
    ])
  );
  
/*
  controller.addTween(
    $('#page5'),
    TweenMax.to($('#ballots .all li:first'), .5, {css: {opacity: 1}})
  );
*/



/////////////////////////////////////////////////////

  var pinh = 3300;
  controller.pin($('#page5a'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page5a .top'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page5a #stations').parent(), .5, {css: {position: 'relative', top: 900}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page5a #stations-connect'), .5, {css:{top: 700}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page5a #stations-connect .img img:last-of-type, #page5a #stations-connect .right'), .5, {css:{top: 700}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page5a .bottom'), .5, {css: {opacity: 0}}, {css: {opacity: 1}})),
    onPin: function ()
    {
      $('#page5a-spacer').hide();
      $('#ballots .all li:first').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page5a').offset().top > $(window).scrollTop())
      {
        $('#page5a-spacer').show();
      }
      $('#ballots .all li:first').css({opacity: .6});
    }
  });
  $('#page5a').after('<div id="page5a-spacer"></div>').next().height(pinh);



/////////////////////////////////


  var pinh = 2000;
  controller.pin($('#page6'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page6 header h4').add('#page6 .problem2_img'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page6 .middle .left'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page6 .middle .right'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page6 .bottom'), .5, {css: {opacity: 0}}, {css: {opacity: 1}})),
    onPin: function ()
    {
      $('#page6-spacer').hide();
      $('#ballots .all li:eq(4)').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page6').offset().top > $(window).scrollTop())
      {
        $('#page6-spacer').show();
      }
      $('#ballots .all li:eq(4)').css({opacity: .6});
    }
  });
  $('#page6').after('<div id="page6-spacer"></div>').next().height(pinh);





/*
  controller.addTween(
    $('#page6'),
    (new TimelineMax()).append([
      TweenMax.to($('#ballots .all li:first'), .5, {css: {opacity: .6}}),
      TweenMax.to($('#ballots .all li:eq(4)'), .5, {css: {opacity: 1}})
    ])
  );
*/


/////////////////////////////////



  controller.addTween($('#page7'), TweenMax.fromTo($('#page7 > .top'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}), 300);

  controller.pin($('#page7 > .top'), $('#page7').height(), {
    pushFollowers: false,
    offset: -($('#question_marks').parent().height() + $('#ballots .all').height()),
    onPin: function ()
    {
      $('#ballots .all li:eq(5)').css({opacity: 1});
      $('#ballots .all li:eq(7)').css({opacity: .6});
    },
    onUnpin: function ()
    {
      $('#ballots .all li:eq(5)').css({opacity: .6});
    }
  });
  $(window).load(function ()
  {
    controller.updatePin($('#page7 > .top'), $('#page7').height(), {
      pushFollowers: false,
      offset: -($('#question_marks').parent().height() + $('#ballots .all').height())
    });
  });



/*
  $('#page7 > .top').css({zIndex: 9e4, right: 0});
  controller.pin($('#page7 > .top'), 9e5, {
    pushFollowers: false
  });
*/


/*
  controller.addTween(
    $('#page7'),
    (new TimelineMax()).append([
      TweenMax.to($('#ballots .all li:eq(4)'), .5, {css: {opacity: .6}}),
      TweenMax.to($('#ballots .all li:eq(5)'), .5, {css: {opacity: 1}})
    ])
  );
*/

  $('#protocol6-container .bottom').height($('#protocol6-container .bottom').height());






/////////////////////////////////

  var pinh = 1500;
  controller.pin($('#page8'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page8 > .top'), .3, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.to($('#page8 > .top'), .001, {css: {position: 'fixed', width: 'auto', left: $('#sidebar').width(), right: 0, zIndex: 9999, top: $('#ballots .all').outerHeight() + $('#question_marks').parent().height()}}))
          .append(TweenMax.fromTo($('#page8 .after'), .5, {css: {top: 800}}, {css: {top: 0}})),
    onPin: function ()
    {
      $('#page8-spacer').hide();
      $('#ballots .all li:eq(7)').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page8').offset().top > $(window).scrollTop())
      {
        $('#page8-spacer').show();
      }
    }
  });
  $('#page8').after('<div id="page8-spacer"></div>').next().height(pinh);



  var pinh = 2500;
  controller.pin($('#page8a'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page8a .spreadsheet'), .5, {css: {position: 'relative', top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(1)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(2)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(3)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(4)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(5)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(6)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet li:nth-child(7)'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page8a .spreadsheet-bottom-text'), .5, {css: {top: 800}}, {css: {top: 0}})),
    onPin: function ()
    {
      $('#page8a-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page8a').offset().top > $(window).scrollTop())
      {
        $('#page8a-spacer').show();
      }
    }
  });
  $('#page8a').after('<div id="page8a-spacer"></div>').next().height(pinh);

  
  controller.addTween(
    $('#page8d'),
    (new TimelineMax()).append([
      TweenMax.to($('#page8 > .top'), .001, {css: {zIndex: 'auto', display: 'none'}}),
      TweenMax.to($('#ballots .all li:eq(7)'), .001, {css: {opacity: .6}})
    ])
  );



/////////////////////////////////

/*
  var ph = $('#page10 header');
  ph.wrap('<div style="position: relative; height: ' + ph.outerHeight() + 'px;"></div>').css({position: 'absolute', left: 0});
  controller.addTween(ph, TweenMax.to($('#page10 header'), .01, {css: {position: 'fixed', left: 90, top: 70}}), 0);

  var cs = $('#page10 #country_stats');
  cs.wrap('<div style="position: relative; height: ' + cs.outerHeight() + 'px;"></div>').css({position: 'absolute', right: 0, left: 0, zIndex: 100});
  controller.pin(cs, 2000, {
    pushFollowers: false,
    offset: -110,
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page10 [id*="district_amount"]'), .5, {css: {position: 'relative', top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page10 [id*="district_percent"]'), .5, {css: {opacity: 1}}, {css: {opacity: 1}}))
  });
*/




  var pinh = 2500;
  controller.pin($('#page10'), pinh, {
    anim: (new TimelineMax())
            .append([
              TweenMax.to($('#page10 header'), .01, {css: {position: 'fixed', right: 0, left: 90, top: 70}}),
              TweenMax.to($('#page10 #map_text'), .01, {css: {marginTop: '+=' + $('#page10 header').height()}})
            ])
            .append(TweenMax.to($('#page10 #map_text'), .5, {delay: 1, css: {marginTop: '-=420'}}))
            .append(TweenMax.fromTo($('#page10 [id*="district_amount"]'), .5, {css: {position: 'relative', top: 800}}, {css: {top: 0}}))
            .append(TweenMax.fromTo($('#page10 [id*="district_percent"]'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
            .append(TweenMax.to($('#page10 header'), .01, {css: {position: 'absolute', left: 0}})),
    onPin: function ()
    {
      $('#page10-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page10').offset().top > $(window).scrollTop())
      {
        $('#page10-spacer').show();
      }
    }
  });
  $('#page10').after('<div id="page10-spacer"></div>').next().height(pinh);

/////////////////////////////////


  var pinh = 2500;
  controller.pin($('#page11'), pinh, {
    anim: (new TimelineMax())
            .append([
              TweenMax.to($('#page11 header'), .01, {css: {position: 'fixed', right: 0, left: 90, top: 70}}),
              TweenMax.to($('#page11 #map_text'), .01, {css: {marginTop: '+=' + $('#page11 header').height()}})
            ])
            .append(TweenMax.to($('#page11 #map_text'), .5, {delay: 1, css: {marginTop: '-=429'}}))
            .append(TweenMax.fromTo($('#page11 [id*="district_amount"]'), .5, {css: {position: 'relative', top: 800}}, {css: {top: 0}}))
            .append(TweenMax.fromTo($('#page11 [id*="district_percent"]'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
            .append(TweenMax.to($('#page11 header'), .01, {css: {position: 'absolute', left: 0}})),
    onPin: function ()
    {
      $('#page11-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page11').offset().top > $(window).scrollTop())
      {
        $('#page11-spacer').show();
      }
    }
  });
  $('#page11').after('<div id="page11-spacer"></div>').next().height(pinh);

/////////////////////////////////


  var pinh = 2500;
  controller.pin($('#page12'), pinh, {
    anim: (new TimelineMax())
            .append([
              TweenMax.to($('#page12 header'), .01, {css: {position: 'fixed', right: 0, left: 90, top: 70}}),
              TweenMax.to($('#page12 #intro'), .01, {css: {marginTop: '+=' + $('#page12 header').height()}})
            ])
            .append(TweenMax.to($('#page12 #intro'), .5, {delay: 1, css: {marginTop: '-=470'}}))
            .append(TweenMax.fromTo($('#page12 #polling_station_stats_text'), .5, {css: {position: 'relative', top: 800}}, {css: {top: 0}}))
            .append(TweenMax.fromTo($('#page12 .polling_station_stats'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
            .append(TweenMax.from($('#page12 .polling_station_stats .connector'), .5, {css: {width: 0}}))
            .append(TweenMax.to($('#page12 header'), .01, {css: {position: 'absolute', left: 0}})),
    onPin: function ()
    {
      $('#page12-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page12').offset().top > $(window).scrollTop())
      {
        $('#page12-spacer').show();
      }
    }
  });
  $('#page12').after('<div id="page12-spacer"></div>').next().height(pinh);

/////////////////////////////////


  var pinh = 2500;
  controller.pin($('#page13'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.to($('#page13 #line2'), .5, {css:{top: 0}}))
          .append(TweenMax.to($('#page13 #line3'), .5, {css:{top: 0}})),
    onPin: function ()
    {
      $('#page13-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page13').offset().top > $(window).scrollTop())
      {
        $('#page13-spacer').show();
      }
    }
  });
  $('#page13').after('<div id="page13-spacer"></div>').next().height(pinh);



/////////////////////////////////////



  controller.addTween(
    $('#page14'),
    (new TimelineMax()).append([
      TweenMax.to($('#line_fix').parent(), .001, {css: {position: 'fixed', width: 'auto', left: $('#sidebar').width(), right: 0, zIndex: 9999, top: $('#ballots .all').outerHeight() + $('#question_marks').parent().height()}}),
      TweenMax.to($('#line_fix_spacer'), .001, {css: {height: $('#line_fix').parent().outerHeight(true)}}),
      TweenMax.to($('#question_marks img'), .001, {css: {opacity: .6}})
    ])
  );
  



///////////////////////////////////////


  var pinh = 3300;
  var big_circle_radius = $('#page15 .middle #circles .left .circle').css('width').replace('px', '')/2;
  var little_circle_radius = $('#page15 .middle #circles .right .circle').css('width').replace('px', '')/2;
  var box_width = $('#page15 .middle #circles .right').css('width').replace('px', '');
  var move_left = (box_width/2 - big_circle_radius) + (2*little_circle_radius) + (box_width/2 - little_circle_radius);
  controller.pin($('#page15'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page15 .top'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page15 .middle #text'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page15 .middle #circles'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append([
            TweenMax.to($('#page15 .middle #circles .right .circle > div'), .5, {css: {opacity: 0 }}),
            TweenMax.to($('#page15 .middle #circles .right'), .5, {css: {left: -(move_left) }})
          ])
          .append(TweenMax.fromTo($('#page15 .or'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page15 .bottom #text'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page15 .bottom #circles'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append([
            TweenMax.to($('#page15 .bottom #circles .right .circle #text1'), .01, {css: {display: 'none'}}),
            TweenMax.to($('#page15 .bottom #circles .right .circle'), .5, {css: {fontSize: '29px', lineHeight: '38px', padding: "48px 10px", backgroundColor: "#e15e32", width: '208px', height: '208px'}}),
            TweenMax.to($('#page15 .bottom #circles .right'), .5, {css: {paddingTop: 0}})
          ])
          .append(TweenMax.to($('#page15 .bottom #circles .right .circle #text2'), .01, {css: {display: 'inline'}})),
    onPin: function ()
    {
      $('#page15-spacer').hide();
      $('#ballots .all li:first').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page15').offset().top > $(window).scrollTop())
      {
        $('#page15-spacer').show();
      }
      $('#ballots .all li:first').css({opacity: .6});
    }
  });
  $('#page15').after('<div id="page15-spacer"></div>').next().height(pinh);



//////////////////////////////////////


  var pinh = 3500;
  controller.pin($('#page16'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page16 header h3').add('#page16 .line_fix23_img'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page16 .middle'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page16 .bottom .left'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page16 .bottom .right'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page16 .bottom2 .left'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page16 .bottom2 .middle'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page16 .bottom2 .right'), .5, {css: {top: 800}}, {css: {top: 0}})),
    onPin: function ()
    {
      $('#page16-spacer').hide();
      $('#ballots .all li:eq(4)').css({opacity: 1});
      $('#ballots .all li:eq(5)').css({opacity: 1});
    },
    onUnpin: function ()
    {
      if ($('#page16').offset().top > $(window).scrollTop())
      {
        $('#page16-spacer').show();
      }
      $('#ballots .all li:eq(4)').css({opacity: .6});
      $('#ballots .all li:eq(5)').css({opacity: .6});
    }
  });
  $('#page16').after('<div id="page16-spacer"></div>').next().height(pinh);



////////////////////////////////////////


  var pinh = 2000;
  controller.pin($('#page17'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.fromTo($('#page17  > .top'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page17 .middle #text'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page17 .middle #eq_header'), .5, {css: {top: 800}}, {css: {top: 0}}))
          .append(TweenMax.fromTo($('#page17 .middle #eq_circle'), .5, {css: {opacity: 0}}, {css: {opacity: 1}}))
          .append(TweenMax.fromTo($('#page17 .bottom'), .5, {css: {top: 800}}, {css: {top: 0}})),
    onPin: function ()
    {
      $('#page17-spacer').hide();
      $('#ballots .all li:eq(7)').css({opacity: 1});
    //$('#ballots .all').add($('#line_fix').parent()).add($('#question_marks').parent()).show();
    },
    onUnpin: function ()
    {
      if ($('#page17').offset().top > $(window).scrollTop())
      {
        $('#page17-spacer').show();
      }
      $('#ballots .all li:eq(7)').css({opacity: .6});
    //$('#ballots .all').add($('#line_fix').parent()).add($('#question_marks').parent()).hide();
    }
  });
  $('#page17').after('<div id="page17-spacer"></div>').next().height(pinh);


//////////////////////////////////////

  controller.addTween($('#page18'), TweenMax.fromTo($('#ballots .all'), .1, {css: {top: 0}}, {css: {top: '-=100', display: 'none'}}), 100, -200);
  controller.addTween($('#page18'), TweenMax.to($('#line_fix').parent().add($('#question_marks').parent()), .1, {css: {top: '-=100', display: 'none'}}), 100, -200);

//////////////////////////////////////



  var pinh = 2500;
  controller.pin($('#page18'), pinh, {
    anim: (new TimelineMax())
          .append(TweenMax.to($('#page18 .caret'), .05, {css:{opacity: 0}}))
          .append(TweenMax.fromTo($('#page18 #line2'), .5, {css:{top: 1000}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page18 #line3'), .5, {css:{top: 1000}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page18 #line4'), .5, {css:{top: 1000}}, {css:{top: 0}}))
          .append(TweenMax.fromTo($('#page18 #by_js'), .5, {css:{opacity: 0}}, {css:{opacity: 1}}))
          ,//.append(TweenMax.fromTo($('#page18 #sources'), .5, {css:{opacity: 0}}, {css:{opacity: 1}})),
    onPin: function ()
    {
      $('#page18-spacer').hide();
    },
    onUnpin: function ()
    {
      if ($('#page18').offset().top > $(window).scrollTop())
      {
        $('#page18-spacer').show();
      }
    }
  });
  $('#page18').after('<div id="page18-spacer"></div>').next().height(pinh);




////////////////////////////////
  // create the menu

  $('header').each(function(){menu_position.push($(this).offset().top)});
  $('header').each(function(){menu_text.push($(this).text().replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' '))});
  $('header').each(function(){menu_section.push($(this).closest('section').attr('id'))});
  // override the first item position to 0
  menu_position[0] = 0;
  
  for(var i=0;i<menu_text.length;i++){
    css_class = i == 0 ? "class=active" : ""
    $('#sidebar #menu').append('<li original-title="' + menu_text[i] + '" data-position="' + menu_position[i] + '" data-section="' + menu_section[i] + '" ' + css_class + '><div>&nbsp;</div></li>');

    $('#slide_menu ul').append('<li data-position="' + menu_position[i] + '" data-section="' + menu_section[i] + '" ' + css_class + '>' + menu_text[i] + '</li>');
  }

	// tipsy tooltips
  // main menu
	$('#sidebar #menu li').tipsy({
		gravity: 'w',
		opacity: 1.0
	});

  // ballot icons
	$('#ballots .all img').tipsy({
		gravity: 'n',
		opacity: 1.0,
		className: 'tt-ballots'
	});

  // errors
	$('#question_marks img').tipsy({
		gravity: 'n',
		opacity: 1.0,
		className: 'tt-questions'
	});

  // fix
	$('#line_fix img').tipsy({
		gravity: 'n',
		opacity: 1.0,
		className: 'tt-fix'
	});
	
	// social icons
	$('#sidebar #social_links li a').tipsy({
		gravity: 'w',
		opacity: 1.0,
		className: 'tt-menu'
	});
	
	// popup menu
	$('#sidebar #popup_menu_button img').tipsy({
		gravity: 'w',
		opacity: 1.0,
		className: 'tt-menu'
	});

	// logo
	$('#sidebar #logo a').tipsy({
		gravity: 'w',
		opacity: 1.0,
		className: 'tt-menu'
	});


  // menu click
  $('#sidebar #menu li, #slide_menu ul li').click(function(){
    $('html, body').animate({scrollTop: compute_scroll_top($(this).data('position'), $(this).data('position'))});
  });


  // highlight correct menu item based on position
  $(window).scroll(function(){
    highlight_correct_menu_item();
  });

  // highlight the correct menu item when the page loads
  highlight_correct_menu_item();

////////////////////////////////////////






  $('#loading').fadeOut();





});
